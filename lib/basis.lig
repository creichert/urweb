type int
type float
type string


con tag :: {Type} -> {Unit} -> {Unit} -> Type


con xml :: {Unit} -> Type
val cdata : ctx ::: {Unit} -> string -> xml ctx
val tag : attrsGiven ::: {Type} -> attrsAbsent ::: {Type} -> attrsGiven ~ attrsAbsent
        -> outer ::: {Unit} -> inner ::: {Unit}
        -> $attrsGiven
        -> tag (attrsGiven ++ attrsAbsent) outer inner
        -> xml inner
        -> xml outer
val join : shared :: {Unit}
        -> ctx1 ::: {Unit} -> ctx1 ~ shared
        -> ctx2 ::: {Unit} -> ctx2 ~ shared
        -> xml (shared ++ ctx1) -> xml (shared ++ ctx2) -> xml shared


val head : tag [] [Html] [Head]
val title : tag [] [Head] []

val body : tag [] [Html] [Body]
val p : tag [] [Body] [Body]
val b : tag [] [Body] [Body]
val i : tag [] [Body] [Body]
val font : tag [Size = int, Face = string] [Body] [Body]


val attrifyInt : int -> string
val attrifyFloat : float -> string
